<?php

namespace yii\Uuid\Tests\unit;

use Ramsey\Uuid\Uuid;
use Yii;
use yii\db\Schema;
use yii\Uuid\Tests\_models\UserV1;
use yii\Uuid\Tests\_models\UserV6;
use yii\Uuid\Tests\_models\UserV7;
use yii\Uuid\UuidHelper;

class UuidTest extends \Codeception\Test\Unit
{

    public static function setUpBeforeClass(): void
    {
        if (!extension_loaded('pdo') || !extension_loaded('pdo_sqlite')) {
            static::markTestSkipped('PDO and SQLite extensions are required.');
        }
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
    }


    protected function _before(): void
    {
        Yii::$app->get('db')->dsn = 'sqlite::memory:';
        Yii::$app->getDb()->createCommand()->createTable('user', [
            'uuid' => Schema::TYPE_BINARY . ' NOT NULL PRIMARY KEY',
            'name' => Schema::TYPE_STRING
        ])->execute();
        parent::_before();
    }


    public function testV1Uuid()
    {
        $model = new UserV1();
        $model->name = "Tarun Jangra";
        $user = null;
        if ($model->save()) {
            $user = UserV1::findOne($model->uuid);
        }

        $this->assertTrue(Uuid::isValid(UuidHelper::bin2uuid($user?->uuid)));
    }

    public function testV1InvalidUuid()
    {
        $model = new UserV1();
        $model->uuid = '322.3k3k3k3j';
        $model->name = "Tarun Jangra";
        $model->save();
        $this->assertTrue($model->getFirstError('uuid') === 'Uuid is not valid UUID.');
    }

    public function testV6Uuid()
    {
        $model = new UserV6();
        $model->name = "Tarun Jangra";
        $user = null;
        if ($model->save()) {
            $user = UserV1::findOne($model->uuid);
        }

        $this->assertTrue(Uuid::isValid(UuidHelper::bin2uuid($user?->uuid)));
    }

    public function testV6InvalidUuid()
    {
        $model = new UserV6();
        $model->uuid = '322.3k3k3k3j';
        $model->name = "Tarun Jangra";
        $model->save();
        $this->assertTrue($model->getFirstError('uuid') === 'Wrong uuid.');
    }

    public function testV7Uuid()
    {
        $model = new UserV7();
        $model->name = "Tarun Jangra";
        $user = null;
        if ($model->save()) {
            $user = UserV7::findOne($model->uuid);
        }

        $this->assertTrue(Uuid::isValid(UuidHelper::bin2uuid($user?->uuid)));
    }

    public function testV7InvalidUuid()
    {
        $model = new UserV7();
        $model->uuid = '322.3k3k3k3j';
        $model->name = "Tarun Jangra";
        $model->save();
        $this->assertTrue($model->getFirstError('uuid') === 'Uuid is not valid UUID.');
    }
}
